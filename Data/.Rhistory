print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environment"){
if (tolower(x[j-1]) == "today's" && tolower(x[j-3]) == "faced"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "changing" && tolower(x[j-2]) == "under"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "time" && tolower(x[j-2]) == "real"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environment"){
if (tolower(x[j-1]) == "physical" && tolower(x[j-2]) == "satisfying"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "and" && tolower(x[j-2]) == "systems"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-2]) == "cross" && tolower(x[j-3]) == "platform"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "ecology"){
if (tolower(x[j-1]) == "classroom"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "ecology"){
if (tolower(x[j-2]) == "within" && tolower(x[j-3]) == "entertainment"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "restoration"){
if (tolower(x[j-2]) == "filtering" && tolower(x[j-3]) == "image"){
print(i)
x[j] = "repair"
}
}
}
usc_courses$clean_course_desc[i] = paste(x, collapse=" ")
}
rm(x)
# write out csv
write.csv(usc_courses, "usc_courses_cleaned.csv", row.names = F)
# keyword list to be added
# MAKE SURE TO RUN THIS LINE BEFORE THE FUNCTION!
cmu_usc = read.csv("cmu_usc_pwg_mapped.csv")
tabulate_sdg_keywords <- Vectorize(function(text, sdg, keywords="cmu_usc",
count_repeats=FALSE) {
# Select the right keyword set
if (keywords == "elsevier100") {
goal_df <- elsevier100_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu_usc") { #added this for our data set
goal_df <- cmu_usc %>%
filter(goal == sdg)
} else if (keywords == "sdsn") {
goal_df <- sdsn_keywords %>%
filter(goal == sdg)
} else if (keywords == "elsevier") {
goal_df <- elsevier_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu250") {
goal_df <- cmu250_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu500") {
goal_df <- cmu500_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu1000") {
goal_df <- cmu1000_keywords %>%
filter(goal == sdg)
} else {
goal_df <- keywords %>%
filter(goal == sdg)
}
if (nrow(goal_df) == 0) {
return(c())
}
# Get the keywords and weights
goal_patterns <- goal_df$pattern
goal_keywords <- goal_df$keyword
goal_weights <- goal_df$weight
words <- c()
# Get keywords in a vector
for (idx in 1:nrow(goal_df)) {
if ((str_detect(str_to_lower(text), goal_patterns[idx]))) {
words <- c(words, goal_keywords[idx])
}
}
return(words)
})
tabulate_sdg_keywords("ethical considerations of environment", 12)
rm(cmu_usc)
tabulate_sdg_keywords <- Vectorize(function(text, sdg, keywords="cmu_usc",
count_repeats=FALSE) {
# Select the right keyword set
if (keywords == "cmu_usc") {
goal_df <- cmu_usc %>%
filter(goal == sdg)
}
# else if (keywords == "cmu_usc") { #added this for our data set
#   goal_df <- cmu_usc %>%
#     filter(goal == sdg)
# } else if (keywords == "sdsn") {
#   goal_df <- sdsn_keywords %>%
#     filter(goal == sdg)
# } else if (keywords == "elsevier") {
#   goal_df <- elsevier_keywords %>%
#     filter(goal == sdg)
# }
else if (keywords == "cmu250") {
goal_df <- cmu250_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu500") {
goal_df <- cmu500_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu1000") {
goal_df <- cmu1000_keywords %>%
filter(goal == sdg)
} else {
goal_df <- keywords %>%
filter(goal == sdg)
}
if (nrow(goal_df) == 0) {
return(c())
}
# Get the keywords and weights
goal_patterns <- goal_df$pattern
goal_keywords <- goal_df$keyword
goal_weights <- goal_df$weight
words <- c()
# Get keywords in a vector
for (idx in 1:nrow(goal_df)) {
if ((str_detect(str_to_lower(text), goal_patterns[idx]))) {
words <- c(words, goal_keywords[idx])
}
}
return(words)
})
tabulate_sdg_keywords("ethical considerations of environment", 12)
# MAKE SURE TO RUN THIS LINE BEFORE THE FUNCTION!
cmu_usc = read.csv("cmu_usc_pwg_mapped.csv")
tabulate_sdg_keywords <- Vectorize(function(text, sdg, keywords="cmu_usc",
count_repeats=FALSE) {
# Select the right keyword set
if (keywords == "cmu_usc") {
goal_df <- cmu_usc %>%
filter(goal == sdg)
}
# else if (keywords == "cmu_usc") { #added this for our data set
#   goal_df <- cmu_usc %>%
#     filter(goal == sdg)
# } else if (keywords == "sdsn") {
#   goal_df <- sdsn_keywords %>%
#     filter(goal == sdg)
# } else if (keywords == "elsevier") {
#   goal_df <- elsevier_keywords %>%
#     filter(goal == sdg)
# }
else if (keywords == "cmu250") {
goal_df <- cmu250_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu500") {
goal_df <- cmu500_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu1000") {
goal_df <- cmu1000_keywords %>%
filter(goal == sdg)
} else {
goal_df <- keywords %>%
filter(goal == sdg)
}
if (nrow(goal_df) == 0) {
return(c())
}
# Get the keywords and weights
goal_patterns <- goal_df$pattern
goal_keywords <- goal_df$keyword
goal_weights <- goal_df$weight
words <- c()
# Get keywords in a vector
for (idx in 1:nrow(goal_df)) {
if ((str_detect(str_to_lower(text), goal_patterns[idx]))) {
words <- c(words, goal_keywords[idx])
}
}
return(words)
})
tabulate_sdg_keywords("ethical considerations of environment", 12)
tabulate_sdg_keywords("ethical considerations of environment", 13)
tabulate_sdg_keywords("ethical considerations of environment", 14
)
tabulate_sdg_keywords("ethical considerations of environment", 15)
tabulate_sdg_keywords("ethical considerations of environment", 1)
tabulate_sdg_keywords("ethical considerations of environment", 3)
tabulate_sdg_keywords("ethical considerations of environment", 5)
tabulate_sdg_keywords("poverty", 5)
tabulate_sdg_keywords("poverty", 1)
tabulate_sdg_keywords("poverty", 1, keywords = "cmu250")
library(SDGmapR) # will update this to our github
tabulate_sdg_keywords("poverty", 1, keywords = "cmu250")
tabulate_sdg_keywords <- Vectorize(function(text, sdg, keywords="cmu_usc",
count_repeats=FALSE) {
# Select the right keyword set
if (keywords == "cmu_usc") {
goal_df <- cmu_usc %>%
filter(goal == sdg)
}
# else if (keywords == "cmu_usc") { #added this for our data set
#   goal_df <- cmu_usc %>%
#     filter(goal == sdg)
# } else if (keywords == "sdsn") {
#   goal_df <- sdsn_keywords %>%
#     filter(goal == sdg)
# } else if (keywords == "elsevier") {
#   goal_df <- elsevier_keywords %>%
#     filter(goal == sdg)
# }
else if (keywords == "cmu250") {
goal_df <- cmu250_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu500") {
goal_df <- cmu500_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu1000") {
goal_df <- cmu1000_keywords %>%
filter(goal == sdg)
} else {
goal_df <- keywords %>%
filter(goal == sdg)
}
if (nrow(goal_df) == 0) {
return(c())
}
# Get the keywords and weights
goal_patterns <- goal_df$pattern
goal_keywords <- goal_df$keyword
goal_weights <- goal_df$weight
words <- c()
# Get keywords in a vector
for (idx in 1:nrow(goal_df)) {
if ((str_detect(str_to_lower(text), goal_patterns[idx]))) {
words <- c(words, goal_keywords[idx])
}
}
return(words)
})
tabulate_sdg_keywords <- Vectorize(function(text, sdg, keywords="cmu_usc",
count_repeats=FALSE) {
# Select the right keyword set
if (keywords == "cmu_usc") {
goal_df <- cmu_usc %>%
filter(goal == sdg)
}
# else if (keywords == "cmu_usc") { #added this for our data set
#   goal_df <- cmu_usc %>%
#     filter(goal == sdg)
# } else if (keywords == "sdsn") {
#   goal_df <- sdsn_keywords %>%
#     filter(goal == sdg)
# } else if (keywords == "elsevier") {
#   goal_df <- elsevier_keywords %>%
#     filter(goal == sdg)
# }
else if (keywords == "cmu250") {
goal_df <- cmu250_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu500") {
goal_df <- cmu500_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu1000") {
goal_df <- cmu1000_keywords %>%
filter(goal == sdg)
} else {
goal_df <- keywords %>%
filter(goal == sdg)
}
if (nrow(goal_df) == 0) {
return(c())
}
# Get the keywords and weights
goal_patterns <- goal_df$pattern
goal_keywords <- goal_df$keyword
goal_weights <- goal_df$weight
words <- c()
# Get keywords in a vector
for (idx in 1:nrow(goal_df)) {
if ((str_detect(str_to_lower(text), goal_patterns[idx]))) {
words <- c(words, goal_keywords[idx])
}
}
return(words)
})
library(tidyverse)
library(dplyr)
classes = read.csv("usc_courses_cleaned.csv")
cmu_usc_keywords = read.csv("cmu_usc_pwg_mapped.csv")
all_sdg_keywords <- data.frame()
for (goal_num in 1:17) {
print(goal_num) #useful for seeing how far you are in the code run
classes %>%
mutate(goal = goal_num, #run on clean_course_desc column w no punctuation and accuracy edits made
keyword = tabulate_sdg_keywords(classes$clean_course_desc, goal_num, keywords = "cmu_usc")) %>%
unnest(keyword) -> cur_sdg_keywords
all_sdg_keywords <- rbind(all_sdg_keywords, cur_sdg_keywords)
}
#create a copy because that code took 30+ minutes to run
all_sdg_keywords_copy = all_sdg_keywords
#now join it with cmu to get color and weight
all_sdg_keywords_copy %>%
left_join(cmu_usc_keywords, by = c("goal", "keyword")) %>%
select(courseID, course_title, section, semester, keyword, goal, weight, color, course_desc, department, N.Sections, year) %>%
arrange(courseID) -> all_sdg_keywords_copy
write.csv(all_sdg_keywords_copy, "master_course_sdg_data.csv", row.names = F)
save(all_sdg_keywords_copy, file="all_sdg_keywords.Rda")
# function to filter data to data only with weight above certain threshold
filter = function(data, threshold){
mini_df = data[data$weight > threshold, ]
return(mini_df)
}
# filter the master data after the mapping
master_data = read.csv("master_course_sdg_data.csv")
filtered_data = filter(master_data, 0.2)
write.csv(filtered_data, "master_course_sdg_data_filtered.csv", row.names=F)
# data containing all course titles
usc_courses = read.csv("usc_courses_cleaned.csv")
# data containing what courses map to which goals
# this is the filtered data
master_data = read.csv("master_course_sdg_data_filtered.csv")
# grab the unique class titles
classes = unique(usc_courses$course_title)
sustainability = data.frame(classes)
# create column to store goals that class maps to
sustainability = sustainability %>% add_column(goals = NA)
# create column to store sustainability-relatedness
sustainability = sustainability %>% add_column(related = NA)
# criteria lists
social_economic_goals = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17)
environment_goals = c(13, 14, 15)
index = 1
for (class in sustainability$classes){
# subset master data to just the rows for that class and grab the unique goals
mini_df = unique(master_data[master_data$course_title == class, "goal"])
# combine all the goals into a string to be added to the goals column in df
goals = paste(mini_df, collapse=",")
#update the goals column of df to be this string "goals"
sustainability$goals[index] = goals
index = index + 1
}
sustainability
# now need to go through and check criteria and update the related column accordingly
for (i in 1:nrow(sustainability)){
# first check if it is null
if (sustainability$goals[i] == ""){
sustainability$related[i] = "Not Related"
next
}
# grab the goals in each row
goals = as.list(strsplit(sustainability$goals[i], ",")[[1]])
# set these booleans to false for each row to start
is_social_economic = FALSE
is_environment = FALSE
for (j in 1:length(goals)){
if (goals[j] %in% social_economic_goals){
is_social_economic = TRUE
}
if (goals[j] %in% environment_goals){
is_environment = TRUE
}
}
# now we should know if there was at least one of the criteria present
if (is_social_economic & is_environment){
sustainability$related[i] = "Focused"
}
if (is_social_economic & !is_environment){
sustainability$related[i] = "Inclusive"
}
if (!is_social_economic & is_environment){
sustainability$related[i] = "Inclusive"
}
}
sustainability
names(sustainability)
sum(sustainability$sustainability_classification == "Focused")
sum(sustainability$sustainability_classification == "Inclusive")
sum(sustainability$sustainability_classification == "Not Related")
# need to rename the columns
names(sustainability)[names(sustainability) == 'classes'] <- "course_title"
names(sustainability)[names(sustainability) == 'related'] <- "sustainability_classification"
names(sustainability)[names(sustainability) == 'goals'] <- "all_goals"
sum(sustainability$sustainability_classification == "Focused")
sum(sustainability$sustainability_classification == "Inclusive")
sum(sustainability$sustainability_classification == "Not Related")
write.csv(sustainability, "sustainability_related_courses_filtered.csv", row.names = F)
# want to create a dataframe with more information for pie charts using joins
sustainability = read.csv("sustainability_related_courses_filtered.csv")
course_data = usc_courses %>% left_join(sustainability, by="course_title")
write.csv(course_data, "usc_courses_full_filtered.csv", row.names = F)
# read in the filtered or unfiltered data
classes = read.csv("master_course_sdg_data_filtered.csv")
# data for pie chart
sustainability_related = read.csv("usc_courses_full_filtered.csv")
sdg_colors <- c('#e5243b', '#DDA63A', '#4C9F38', '#C5192D', '#FF3A21', '#26BDE2',
'#FCC30B', '#A21942', '#FD6925', '#DD1367', '#FD9D24', '#BF8B2E',
'#3F7E44', '#0A97D9', '#56C02B', '#00689D', '#19486A')
runApp('~/Desktop/USC-SDGmap/shiny_app')
runApp('~/Desktop/USC-SDGmap/shiny_app')
runApp('~/Desktop/USC-SDGmap/shiny_app')
# data containing all course titles
usc_courses = read.csv("usc_courses_cleaned.csv")
# data containing what courses map to which goals
# this is the filtered data
master_data = read.csv("master_course_sdg_data_filtered.csv")
names(master_data)
names(usc_courses)
names(usc_courses) == names(master_data)
# grab the unique class titles
classes = unique(usc_courses$course_title)
sustainability = data.frame(classes)
# create column to store goals that class maps to
sustainability = sustainability %>% add_column(goals = NA)
# create column to store sustainability-relatedness
sustainability = sustainability %>% add_column(related = NA)
# criteria lists
social_economic_goals = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17)
environment_goals = c(13, 14, 15)
index = 1
for (class in sustainability$classes){
# subset master data to just the rows for that class and grab the unique goals
mini_df = unique(master_data[master_data$course_title == class, "goal"])
# combine all the goals into a string to be added to the goals column in df
goals = paste(mini_df, collapse=",")
#update the goals column of df to be this string "goals"
sustainability$goals[index] = goals
index = index + 1
}
sustainability
# now need to go through and check criteria and update the related column accordingly
for (i in 1:nrow(sustainability)){
# first check if it is null
if (sustainability$goals[i] == ""){
sustainability$related[i] = "Not Related"
next
}
# grab the goals in each row
goals = as.list(strsplit(sustainability$goals[i], ",")[[1]])
# set these booleans to false for each row to start
is_social_economic = FALSE
is_environment = FALSE
for (j in 1:length(goals)){
if (goals[j] %in% social_economic_goals){
is_social_economic = TRUE
}
if (goals[j] %in% environment_goals){
is_environment = TRUE
}
}
# now we should know if there was at least one of the criteria present
if (is_social_economic & is_environment){
sustainability$related[i] = "Focused"
}
if (is_social_economic & !is_environment){
sustainability$related[i] = "Inclusive"
}
if (!is_social_economic & is_environment){
sustainability$related[i] = "Inclusive"
}
}
# need to rename the columns
names(sustainability)[names(sustainability) == 'classes'] <- "course_title"
names(sustainability)[names(sustainability) == 'related'] <- "sustainability_classification"
names(sustainability)[names(sustainability) == 'goals'] <- "all_goals"
sum(sustainability$sustainability_classification == "Focused")
sum(sustainability$sustainability_classification == "Inclusive")
sum(sustainability$sustainability_classification == "Not Related")
# want to create a dataframe with more information for pie charts using joins
sustainability = read.csv("sustainability_related_courses_filtered.csv")
course_data = usc_courses %>% left_join(sustainability, by="course_title", all.x = T)
names(course_data)
rm(cours_data)
rm(course_data)
sustainability
course_data = usc_courses %>% left_join(sustainability, by="course_title")
names(course_data)
write.csv(course_data, "usc_courses_full_filtered.csv", row.names = F)
# read in the filtered or unfiltered data
classes = read.csv("master_course_sdg_data_filtered.csv")
# data for pie chart
sustainability_related = read.csv("usc_courses_full_filtered.csv")
runApp('~/Desktop/USC-SDGmap/shiny_app')
runApp('~/Desktop/USC-SDGmap/shiny_app')
runApp('~/Desktop/USC-SDGmap/shiny_app')
