if (is.na(x[j])){
next
}
if (x[j] == "environment" | x[j] == "environments" | x[j] == "Environment" | x[j] == "Environments"){
# print(i)
if (tolower(x[j-1]) %in% words){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "ecology"){ #there is also industry ecology but i think it should map for that class
if (tolower(x[j-1]) == "classroom"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "power"){
if (tolower(x[j-1]) == "social"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "presidential"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "sex"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "political"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "th"){ #this is for N-th power derivatives
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "consistency"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "functions"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "film"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "motivation"){
print(i)
x[j] = "domain"
}
if (tolower(x[j-1]) == "diversity"){
print(i)
x[j] = "domain"
}
}
}
usc_courses$clean_course_desc[i] = paste(x, collapse=" ")
}
# environment followed by "of an air force officer"
# or "power" followed by a bunch of phrases
for (i in 1:nrow(usc_courses)){
desc = usc_courses$clean_course_desc[i]
x = unlist(strsplit(desc, " "))
if (length(x) < 6){
next
}
for (j in 1:(length(x)-5)){
if (tolower(x[j]) == "environment"){
if (tolower(x[j+3]) == "air" && tolower(x[j+4]) == "force" && tolower(x[j+5]) == "officer"){
print(i)
x[j] = "domain"
}
}
# words following "power"
if (tolower(x[j]) == "power"){
if (tolower(x[j+2]) == "black" && tolower(x[j+3]) == "america"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+2]) == "historical" && tolower(x[j+3]) == "trauma"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "of" && tolower(x[j+2]) == "narrative"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "leadership"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+2]) == "personal" && tolower(x[j+2]) == "finance"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+3]) == "aging" && tolower(x[j+2]) == "society"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "tools" && tolower(x[j+3]) == "visual"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "and" && tolower(x[j+2]) == "responsibility"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "of" && tolower(x[j+2]) == "discovering"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+3]) == "federal" && tolower(x[j+4]) == "government"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "relations" && tolower(x[j+2]) == "among" & tolower(x[j+3]) == "men"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "and" && tolower(x[j+2]) == "authority"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+3]) == "federal" && tolower(x[j+4]) == "government"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "and" && tolower(x[j+2]) == "institutions"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "and" && tolower(x[j+2]) == "institutions"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "politics" && tolower(x[j+3]) == "influence"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "and" && tolower(x[j+2]) == "institutions"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "legitimate" && tolower(x[j+3]) == "effective"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+2]) == "resolve" && tolower(x[j+3]) == "conflicts"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+2]) == "occupation" && tolower(x[j+3]) == "throughout"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "confidence" && tolower(x[j+3]) == "identity"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "walking"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "distribution" && tolower(x[j+3]) == "american"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "of" && tolower(x[j+2]) == "government"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "of" && tolower(x[j+2]) == "governments"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+3]) == "united" && tolower(x[j+4]) == "states"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "resistance" && tolower(x[j+3]) == "political"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "explores" && tolower(x[j+2]) == "collective"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "in" && tolower(x[j+2]) == "iberian"){
print(i)
x[j] = "domain"
}
if (tolower(x[j+1]) == "and" && tolower(x[j+2]) == "responsibilities"){
print(i)
x[j] = "domain"
}
}
}
usc_courses$clean_course_desc[i] = paste(x, collapse=" ")
}
# fixing all other phrases before "environment", "ecology", or "power"
for (i in 1:nrow(usc_courses)){
desc = usc_courses$clean_course_desc[i]
x = unlist(strsplit(desc, " "))
if (length(x) < 6){ # start at the 6th word so no out of bounds errors
next
}
for (j in 6:length(x)){
# fix environment phrases
if (tolower(x[j]) == "environment" | tolower(x[j]) == "environments"){
if (tolower(x[j-3]) == "design" && tolower(x[j-5]) == "consequences"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "rich" && tolower(x[j-2]) == "emotionally"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "care" && tolower(x[j-2]) == "health"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-2]) == "characters" && tolower(x[j-3]) == "creating"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "of" && tolower(x[j-2]) == "development"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "global" && tolower(x[j-2]) == "changing"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environment"){
if (tolower(x[j-4]) == "international" && tolower(x[j-3]) == "trade"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "data" && tolower(x[j-2]) == "large"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environment"){
if (tolower(x[j-1]) == "today's" && tolower(x[j-3]) == "faced"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "changing" && tolower(x[j-2]) == "under"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "time" && tolower(x[j-2]) == "real"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environment"){
if (tolower(x[j-1]) == "physical" && tolower(x[j-2]) == "satisfying"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-1]) == "and" && tolower(x[j-2]) == "systems"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "environments"){
if (tolower(x[j-2]) == "cross" && tolower(x[j-3]) == "platform"){
print(i)
x[j] = "domain"
}
}
# fix ecology phrases
if (tolower(x[j]) == "ecology"){
if (tolower(x[j-1]) == "classroom"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "ecology"){
if (tolower(x[j-2]) == "within" && tolower(x[j-3]) == "entertainment"){
print(i)
x[j] = "domain"
}
}
# fix image filtering restoration
if (tolower(x[j]) == "restoration"){
if (tolower(x[j-2]) == "filtering" && tolower(x[j-3]) == "image"){
print(i)
x[j] = "repair"
}
}
# for power phrases
if (tolower(x[j]) == "power"){
if (tolower(x[j-2]) == "culture"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "power"){
if (tolower(x[j-1]) == "maintain" && tolower(x[j-3]) == "practices"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "power"){
if (tolower(x[j-2]) == "leadership"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "power"){
if (tolower(x[j-1]) == "statistical"){
print(i)
x[j] = "domain"
}
}
if (tolower(x[j]) == "power"){
if (tolower(x[j-2]) == "status" && tolower(x[j-3]) == "class"){
print(i)
x[j] = "domain"
}
}
}
usc_courses$clean_course_desc[i] = paste(x, collapse=" ")
}
dim(usc_courses)
names(usc_courses)
write.csv(usc_courses, "usc_courses_cleaned.csv", row.names = F)
# MAKE SURE TO RUN THIS LINE BEFORE THE FUNCTION!
cmu_usc = read.csv("cmu_usc_pwg_mapped.csv")
tabulate_sdg_keywords <- Vectorize(function(text, sdg, keywords="cmu_usc",
count_repeats=FALSE) {
# Select the right keyword set
if (keywords == "cmu_usc") {
goal_df <- cmu_usc %>%
filter(goal == sdg)
}
# else if (keywords == "cmu_usc") { #added this for our data set
#   goal_df <- cmu_usc %>%
#     filter(goal == sdg)
# } else if (keywords == "sdsn") {
#   goal_df <- sdsn_keywords %>%
#     filter(goal == sdg)
# } else if (keywords == "elsevier") {
#   goal_df <- elsevier_keywords %>%
#     filter(goal == sdg)
# }
else if (keywords == "cmu250") {
goal_df <- cmu250_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu500") {
goal_df <- cmu500_keywords %>%
filter(goal == sdg)
} else if (keywords == "cmu1000") {
goal_df <- cmu1000_keywords %>%
filter(goal == sdg)
} else {
goal_df <- keywords %>%
filter(goal == sdg)
}
if (nrow(goal_df) == 0) {
return(c())
}
# Get the keywords and weights
goal_patterns <- goal_df$pattern
goal_keywords <- goal_df$keyword
goal_weights <- goal_df$weight
words <- c()
# Get keywords in a vector
for (idx in 1:nrow(goal_df)) {
if ((str_detect(str_to_lower(text), goal_patterns[idx]))) {
words <- c(words, goal_keywords[idx])
}
}
return(words)
})
classes = read.csv("usc_courses_cleaned.csv")
cmu_usc_keywords = read.csv("cmu_usc_pwg_mapped.csv")
library(dplyr)
all_sdg_keywords <- data.frame()
for (goal_num in 1:17) {
print(goal_num) #useful for seeing how far you are in the code run
classes %>%
mutate(goal = goal_num, #run on clean_course_desc column w no punctuation and accuracy edits made
keyword = tabulate_sdg_keywords(classes$clean_course_desc, goal_num, keywords = "cmu_usc")) %>%
unnest(keyword) -> cur_sdg_keywords
all_sdg_keywords <- rbind(all_sdg_keywords, cur_sdg_keywords)
}
#create a copy because that code took 30+ minutes to run
all_sdg_keywords_copy = all_sdg_keywords
names(all_sdg_keywords_copy)
#now join it with cmu to get color and weight
all_sdg_keywords_copy %>%
left_join(cmu_usc_keywords, by = c("goal", "keyword")) %>%
select(courseID, course_title, section, semester, keyword, goal, weight, color, course_desc, department, N.Sections, year) %>%
arrange(courseID) -> all_sdg_keywords_copy
names(all_sdg_keywords_copy)
write.csv(all_sdg_keywords_copy, "master_course_sdg_data.csv", row.names = F)
save(all_sdg_keywords_copy, file="all_sdg_keywords.Rda")
# filter the master data after the mapping
master_data = read.csv("master_course_sdg_data.csv")
filtered_data = filter(master_data, 0.2)
# function to filter data to data only with weight above certain threshold
filter = function(data, threshold){
mini_df = data[data$weight > threshold, ]
return(mini_df)
}
filtered_data = filter(master_data, 0.2)
dim(filtered_data)
127000-113000
# removed about 14000 rows
write.csv(filtered_data, "master_course_sdg_data_filtered.csv", row.names=F)
# data containing all course titles
usc_courses = read.csv("usc_courses_cleaned.csv")
# data containing what courses map to which goals
# this is the filtered data
master_data = read.csv("master_course_sdg_data_filtered.csv")
# grab the unique class titles
classes = unique(usc_courses$course_title)
dim(classes)
length(classes)
sustainability = data.frame(classes)
# create column to store goals that class maps to
sustainability = sustainability %>% add_column(goals = NA)
# create column to store sustainability-relatedness
sustainability = sustainability %>% add_column(related = NA)
# criteria lists
social_economic_goals = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17)
environment_goals = c(13, 14, 15)
index = 1
sustainability
for (class in sustainability$classes){
# subset master data to just the rows for that class and grab the unique goals
mini_df = unique(master_data[master_data$course_title == class, "goal"])
# combine all the goals into a string to be added to the goals column in df
goals = paste(mini_df, collapse=",")
#update the goals column of df to be this string "goals"
sustainability$goals[index] = goals
index = index + 1
}
sustainability
# now need to go through and check criteria and update the related column accordingly
for (i in 1:nrow(sustainability)){
# first check if it is null
if (sustainability$goals[i] == ""){
sustainability$related[i] = "Not Related"
next
}
# grab the goals in each row
goals = as.list(strsplit(sustainability$goals[i], ",")[[1]])
# set these booleans to false for each row to start
is_social_economic = FALSE
is_environment = FALSE
for (j in 1:length(goals)){
if (goals[j] %in% social_economic_goals){
is_social_economic = TRUE
}
if (goals[j] %in% environment_goals){
is_environment = TRUE
}
}
# now we should know if there was at least one of the criteria present
if (is_social_economic & is_environment){
sustainability$related[i] = "Focused"
}
if (is_social_economic & !is_environment){
sustainability$related[i] = "Inclusive"
}
if (!is_social_economic & is_environment){
sustainability$related[i] = "Inclusive"
}
}
sustainability
sustainability
# need to rename the columns
names(sustainability)[names(sustainability) == 'classes'] <- "course_title"
names(sustainability)[names(sustainability) == 'related'] <- "sustainability_classification"
names(sustainability)[names(sustainability) == 'goals'] <- "all_goals"
sum(sustainability$sustainability_classification == "Focused")
sum(sustainability$sustainability_classification == "Inclusive")
sum(sustainability$sustainability_classification == "Not Related")
write.csv(sustainability, "sustainability_related_courses_filtered.csv", row.names = F)
# want to create a dataframe with more information for pie charts using joins
sustainability = read.csv("sustainability_related_courses_filtered.csv")
course_data = usc_courses %>% left_join(sustainability, by="course_title", all.x = T)
write.csv(course_data, "usc_courses_full_filtered.csv", row.names = F)
runApp('shiny_app')
runApp('shiny_app')
